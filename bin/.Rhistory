col=colors)
plotPCA(rld, intgroup=c("condition", "type"))
data <- plotPCA(rld, intgroup=c("condition", "type"), returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=condition, shape=type)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
dds$group <- factor(paste0(dds$genotype, dds$condition))
design(dds) <- ~ group
dds <- DESeq(dds)
resultsNames(dds)
results(dds, contrast=c("group", "IB", "IA"))
head(countData)
write.csv("passillaGenes.csv")
write.csv(countData, "passillaGenes.csv")
getwd()
setwd("~/Desktop/Rcourse-DESeq2")
countData2 <- read.csv("pasillaGenes.csv")
countData2 <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
setwd("~/Desktop/Rcourse-DESeq2")
countData2 <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
getwd()
write.csv(countData, "passillaGenes.csv")
countData2 <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
write.csv(countData, "pasillaGenes.csv")
countData2 <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
as.data.frame(countData2)
colData <- pData(pasillaGenes)[,c("condition","type")]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds
countData <- counts(pasillaGenes)
countData2 <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
data("pasillaGenes")
countData <- counts(pasillaGenes)
head(countData)
countData2 <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
as.data.frame(countData2)
head(countData)
colData <- pData(pasillaGenes)[,c("condition","type")]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds
dds2 <- DESeqDataSetFromMatrix(countData = countData2,
colData = colData,
design = ~ condition)
dds
dds2
dds2 <- DESeqDataSetFromMatrix(countData = countData2,
colData = colData,
design = ~ condition)
head(countData)
head(countData2)
mycountData <- data.frame(mycountData[,-1], row.names=mycountData[,1])
mycountData <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
head(countData2) ### notice, we need to make col 1 the row names
mycountData <- data.frame(mycountData[,-1], row.names=mycountData[,1])
head(mycountData)
write.csv(colData, "pasillaInfo.csv")
mycolData <- read.csv("pasillaInfo.csv", sep=",", header=TRUE)
head(mycolData)
head(colData)
head(mycolData)
head(mycountData) ### notice, we need to make col 1 the row names
head(mycolData) ### notice, we need to make col 1 the row names
mycolData <- data.frame(mycolData[,-1], row.names=mycolData[,1])
head(mycolData) ### notice, we need to make col 1 the row names
mycountData <- read.csv("pasillaGenes.csv", sep=",", header=TRUE)
mycolData <- read.csv("pasillaInfo.csv", sep=",", header=TRUE)
head(mycountData) ### notice, we need to make col 1 the row names
head(mycolData) ### notice, we need to make col 1 the row names
mycountData <- data.frame(row.names=mycountData[,1], mycountData[,-1])
mycolData <- data.frame(row.names=mycolData[,1], mycolData[,-1])
head(mycountData)
head(mycolData)
colData <- pData(pasillaGenes)[,c("condition","type")]
mycolData <- read.csv("pasillaSamples.csv", sep=",", header=TRUE)
mycolData <- data.frame(row.names=mycolData[,1], mycolData[,-1])
head(mycountData)
head(mycolData)
data("pasillaGenes")
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition","type")]
head(countData)
head(colData)
### loading your own personal data
featureData <- data.frame(gene=rownames(pasillaGenes))
(mcols(dds) <- DataFrame(mcols(dds), featureData))
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds
### If you have additional feature data,
### it can be added to the DESeqDataSet
featureData <- data.frame(gene=rownames(pasillaGenes))
(mcols(dds) <- DataFrame(mcols(dds), featureData))
dds$condition <- factor(dds$condition, levels=c("untreated","treated"))
### 1.4 Differential Expresssion
### The standard differential expression analysis steps are wrapped
### into a single function, DESeq.
dds <- DESeq(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds <- dds[ rowSums(counts(dds)) > 1, ]
dds$condition <- factor(dds$condition, levels=c("untreated","treated"))
### 1.4 Differential Expresssion
### The standard differential expression analysis steps are wrapped
### into a single function, DESeq.
dds <- DESeq(dds)
res <- results(dds)
resOrdered <- res[order(res$padj),]
resOrdered
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ condition)
dds
ddsMF <- dds
design(ddsMF) <- formula(~ type + condition)
ddsMF <- DESeq(ddsMF)
resMFType <- results(ddsMF, contrast=c("type","single-read","paired-end"))
head(resMFType)
rld <- rlog(dds)
vsd <- varianceStabilizingTransformation(dds)
head(assay(rld), 3)
### 2.2.1 Heatmap of the count matrix
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
nt <- normTransform(dds) # defaults to log2(x+1)
log2.norm.counts <- assay(nt)[select,]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(log2.norm.counts, cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
res <- results(dds)
res
resOrdered <- res[order(res$padj),]
resOrdered
summary(res)
res05 <- results(dds, alpha=0.05)
dds
featureData <- data.frame(gene=rownames(pasillaGenes))
(mcols(dds) <- DataFrame(mcols(dds), featureData))
dds <- dds[ rowSums(counts(dds)) > 1, ]
dds$condition <- factor(dds$condition, levels=c("untreated","treated"))
dds <- DESeq(dds)
res <- results(dds)
res
### We can order our results table by the smallest adjusted p value:
resOrdered <- res[order(res$padj),]
resOrdered
### We can summarize some basic tallies using the summary function.
summary(res)
### How many adjusted p-values were less than 0.1?
sum(res$padj < 0.1, na.rm=TRUE)
## [1] 797
### If the adjusted p value cutoff will be a value other than 0.1,
### alpha should be set to that value:
sum(res$padj < 0.1, na.rm=TRUE)
## [1] 797
### If the adjusted p value cutoff will be a value other than 0.1,
### alpha should be set to that value:
res05 <- results(dds, alpha=0.05)
summary(res05)
### In DESeq2, the function plotMA shows the log2 fold changes
### attributable to a given variable over the mean of normalized counts.
plotMA(res, main="DESeq2", ylim=c(-2,2))
### A simple function for making this plot is plotCounts, which normalizes counts by sequencing depth and adds a pseudocount
### of 1 2 to allow for log scale plotting. The counts are grouped by the variables in intgroup, where more than
### one variable can be specified. Here we specify the gene which had the smallest p value from the results table
### created above. You can select the gene to plot by rowname or by numeric index.
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
### For customized plotting, an argument returnData specifies that the function
### should only return a data.frame for plotting with ggplot.
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="condition",
returnData=TRUE)
library("ggplot2")
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
# write.csv(as.data.frame(resOrdered),
#          file="condition_treated_results.csv")
### 1.6 Multi-factor designs
colData(dds)
### make a copy
ddsMF <- dds
design(ddsMF) <- formula(~ type + condition)
ddsMF <- DESeq(ddsMF)
ddsMF <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ type +condition)
ddsMF <- DESeq(ddsMF)
resMFType <- results(ddsMF, contrast=c("type","single-read","paired-end"))
head(resMFType)
head(res)
resMFTypeOrdered <- resMFType[order(resMFType$padj),]
resMFTypeOrdered
resOrdered
resOrdered
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
nt <- normTransform(dds) # defaults to log2(x+1)
log2.norm.counts <- assay(nt)[select,]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(log2.norm.counts, cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
pheatmap(assay(rld)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld$condition, rld$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
sampleDistMatrix <- as.matrix(sampleDists)
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rld <- rlog(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),decreasing=TRUE)[1:20]
nt <- normTransform(dds) # defaults to log2(x+1)
log2.norm.counts <- assay(nt)[select,]
df <- as.data.frame(colData(dds)[,c("condition","type")])
pheatmap(log2.norm.counts, cluster_rows=FALSE, show_rownames=FALSE,
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld$condition, rld$type, sep="-")
sampleDistMatrix <- as.matrix(sampleDists)
plotPCA(rld, intgroup=c("condition", "type"))
data <- plotPCA(rld, intgroup=c("condition", "type"), returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=condition, shape=type)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
sampleDists <- dist(t(assay(rld)))
head(assay(rld), 3)
rld <- rlog(dds)
vsd <- varianceStabilizingTransformation(dds)
sampleDists <- dist(t(assay(rld)))
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld$condition, rld$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
plotPCA(rld, intgroup=c("condition", "type"))
data <- plotPCA(rld, intgroup=c("condition", "type"), returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=condition, shape=type)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance"))
?ggplot2
??`ggplot2-ggproto`
library(ggplot2)
help("ggplot")
help("geom_abline", ggplot2)
help("geom_point", ggplot2)
??geom_point
?geom_point
??geom_point
??geom_point
?geom_point
help("geom_point")
help("plot")
?geom_point
??geom_point
?geom_point
??geom_point
vignette(package="ggplot2")
vignette()
help("ggplot2")
??`ggplot2''
""
"qq"
??"ggplot2"
??"dplyr"
??"dplyr"
??'dplyr'
help('geom_point')
??'dplyr'
vignette(package='dplyr)
vignette(package='dplyr')
vignette('dplyr::introduction'
)
vignette('introduction'
)
vignette(introduction, package='dplyr')
vignette()
library('dplyr')
vignette(introduction, package='dplyr')
vignette('dplyr::introduction'
)
vignette()
vignette('dplyr:introduction')
vignette('dplyr':introduction)
vignette('dplyr')
??'dplyr'
vignette('dplyr::introduction')
vignette(dplyr::introduction)
vignette('cowplot::introduction')
vignette('introduction')
??'cowplot'
?dput
?'deseq'
??'deseq'
vignette(package='DESeq2')
vignette('DESeq2')
??'DESeq2'
?'DESeq2'
??'DESeq2'
vignette('DESeq2')
vignette(package='DESeq2')
vignette('introduction')
vignette(package='DESeq2')
vignette('DESeq2')
??'DESeq2'
??'DESeqDataSet/
??'DESeqDataSet'
?'DESeqDataSet'
?'DESeq2'
getwd()
cats <- read.csv(file = "~/Desktop/FilesForRCourse/data/feline-data.csv")
setwd('Desktop/FilesForRCourse/bin')
setwd('~/Desktop/FilesForRCourse/bin')
setwd('~')
getwd()
head(cats)
cats
view(cats)
View(cats)
cats[2]
cats$coat
cats$weight
cats$2
gapminder <- read.csv(file = "~/Desktop/FilesForRCourse/data/gapminder-FiveYearData.csv")
View(gapminder)
gapminder
head(gapminder)
head(gapminder)
gapminder$year
gapminder$year % head
2L
str(gapminder$year)
nrow(gapminder)
str(gapminder$year)
str(gapminder)
str(gapminder$country)
dim(gapminder)
rownames(gapminder)
rownames(gapminder)
View(gapminder)
rownames(gapminder)
colnames(gapminder)
typeof(gapminder$year)
as.factor(gapminder$year)
str(gapminder)
plot(gapminder$year)
plot(gapminder$country, gapminder$pop)
year <- gapminder$year
year
year * 2
typeof(year)
str(year)
library("ggplot2")
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
geom_point()
??'ggplot'
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap))
library("ggplot2")
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
geom_point()
plot(gapminder$lifeExp, gapminder$gdpPercap)
plot(y=gapminder$lifeExp, x=gapminder$gdpPercap)
??'plot'
?'plot'
plot(gapminder$continent, gapminder$gdpPercap)
str(gapminder)
plot(gapminder$lifeExp, gapminder$gdpPercap,
main = 'Relationship btw GDP and LifeExp',
xlab = 'GDP',
ylab = 'Life Expectancy')
plot(gapminder$continent, gapminder$gdpPercap,
main = 'View ofGDP across Continents',
xlab = 'Continent',
ylab = 'GDP')
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) + geom_point()
ggplot(data = gapminder, aes(x = year, y = lifeExp)) + geom_point()
ggplot(data = gapminder,
aes(x = lifeExp, y = gdpPercap)) +
geom_point()
ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +
geom_point()
ggplot(data = gapminder, aes(x=lifeExp, y=gdpPercap, by=country)) +
geom_line(aes(color=continent)) + geom_point()
ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +
geom_line()
ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +
geom_point()
ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +
geom_line()
?'ggplot'
??'ggplot'
ggplot(data = gapminder, aes(x=year, y=lifeExp, color=continent, by=country)) +
geom_line()
)
ggplot(data = gapminder, aes(x=year, y=lifeExp, color=continent, by=country) +
geom_line()
)
ggplot(data = gapminder, aes(x=year, y=lifeExp, color=continent, by=country)) +
geom_line()
+ geom_point()
ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country, color=continent)) +
geom_line() + geom_point()
ggplot(data = gapminder, aes(x=year, y=lifeExp, by=country)) +
geom_line(aes(color=continent)) + geom_point()
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
geom_point() + scale_y_log10()
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap, color=continent)) +
geom_point()
gapminder$logGDP <- log10(gapminder$gdpPercap)
View(gapminder)
head(gapminder)
tail(gapminder)
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap, color=continent)) +
geom_point()
ggplot(data = gapminder, aes(x = lifeExp, y = logGDP, color=continent)) +
geom_point()
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
geom_point() + scale_y_log10()
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap, color=continent)) +
geom_point() + scale_y_log10()
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
geom_point() + scale_y_log10() + geom_smooth(method="lm")
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap)) +
geom_point() + scale_y_log10() + geom_smooth(method="lm", size=1.5)
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap, color=continent)) +
geom_point() + scale_y_log10() + geom_smooth(method="lm")
ggplot(data = gapminder, aes(x = year, y = lifeExp, color=continent)) +
geom_line() + facet_wrap( ~ country)
ggplot(data = gapminder, aes(x = year, y = lifeExp, color=continent)) +
geom_line() + facet_wrap( ~ country) +
xlab("Year") + ylab("Life expectancy") + ggtitle("Figure 1") +
scale_colour_discrete(name="Continent") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(data=gapminder, aes(x=gdpPercap, fill=continent)) +
geom_density(alpha=0.6) + facet_wrap( ~ year) + scale_x_log()
ggplot(data=gapminder, aes(x=gdpPercap, fill=continent)) +
geom_density(alpha=0.6) + facet_wrap( ~ year) + scale_x_log10()
setwd('~/Desktop/FilesForRCourse/bin')
check_pasilla <- function(samples="../data/pasillaSamples.csv",
genes="../data/pasillaGenes.csv") {
## load files
samples <- read.csv(file=samples, stringsAsFactors = FALSE)
genes <- read.csv(file=genes, stringsAsFactors = FALSE)
samples <- read.csv(file=samples, stringsAsFactors = FALSE)
genes <- read.csv(file=genes, stringsAsFactors = FALSE)
samples <- read.csv(file=samples, stringsAsFactors = FALSE)
genes <- read.csv(file=genes, stringsAsFactors = FALSE)
samples <- read.csv("../data/pasillaSamples.csv", sep= ",", stringsAsFactors = FALSE)
View(samples)
check_pasilla <- function(samples="../data/pasillaSamples.csv",
genes="../data/pasillaGenes.csv") {
## load files
samples <- read.csv(file=samples, stringsAsFactors = FALSE)
genes <- read.csv(file=genes, stringsAsFactors = FALSE)
## Get unique plot id
unique_samples <- unique(samples$x)
if (all(unique_samples %in% genes$x)) {
message("Everything looks good.")
return(TRUE)
} else {
warning("Something is wrong.")
return(FALSE)
}
}
check_plots()
check_pasilla()
samples <- read.csv("../data/pasillaSamples.csv", sep= ",", stringsAsFactors = FALSE)
genes <- read.csv("../data/pasillaGenes.csv", sep= "," , stringsAsFactors = FALSE)
samples <- read.csv("../data/pasillaSamples.csv", sep= ",", stringsAsFactors = FALSE)
genes <- read.csv("../data/pasillaGenes.csv", sep= "," , stringsAsFactors = FALSE)
nrow(samples)
ncol(samples)
dim(genes)
unique(samples$x)
check_pasilla <- function(samples="../data/pasillaSamples.csv",
genes="../data/pasillaGenes.csv") {
## load files
samples <- read.csv(file=samples, stringsAsFactors = FALSE)
genes <- read.csv(file=genes, stringsAsFactors = FALSE)
## Get unique plot id
unique_samples <- unique(samples$x)
if (all(unique_samples %in% genes$x)) {
message("Everything looks good.")
return(TRUE)
} else {
warning("Something is wrong.")
return(FALSE)
}
}
check_pasilla()
unique_samples <- unique(samples$x)
